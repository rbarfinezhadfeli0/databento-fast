name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake g++ python3-dev
    
    - name: Install dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install cmake
    
    - name: Build C++ library
      run: |
        mkdir build
        cd build
        cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTS=ON ..
        cmake --build . --config Release
    
    - name: Run C++ tests
      run: |
        cd build
        ctest --output-on-failure
    
    - name: Install Python dependencies
      run: |
        pip install pybind11 setuptools wheel
    
    - name: Build Python package
      run: |
        pip install -e .
    
    - name: Test Python import
      run: |
        python -c "import databento_cpp; print('Successfully imported databento_cpp')"

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Install clang-format
      run: |
        sudo apt-get update
        sudo apt-get install -y clang-format
    
    - name: Check C++ formatting
      run: |
        find include src -name "*.cpp" -o -name "*.hpp" | xargs clang-format --dry-run --Werror
